"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffResource = exports.fullDiff = void 0;
const impl = require("./diff");
const types = require("./diff/types");
const util_1 = require("./diff/util");
__exportStar(require("./diff/types"), exports);
const DIFF_HANDLERS = {
    AWSTemplateFormatVersion: (diff, oldValue, newValue) => diff.awsTemplateFormatVersion = impl.diffAttribute(oldValue, newValue),
    Description: (diff, oldValue, newValue) => diff.description = impl.diffAttribute(oldValue, newValue),
    Metadata: (diff, oldValue, newValue) => diff.metadata = new types.DifferenceCollection((0, util_1.diffKeyedEntities)(oldValue, newValue, impl.diffMetadata)),
    Parameters: (diff, oldValue, newValue) => diff.parameters = new types.DifferenceCollection((0, util_1.diffKeyedEntities)(oldValue, newValue, impl.diffParameter)),
    Mappings: (diff, oldValue, newValue) => diff.mappings = new types.DifferenceCollection((0, util_1.diffKeyedEntities)(oldValue, newValue, impl.diffMapping)),
    Conditions: (diff, oldValue, newValue) => diff.conditions = new types.DifferenceCollection((0, util_1.diffKeyedEntities)(oldValue, newValue, impl.diffCondition)),
    Transform: (diff, oldValue, newValue) => diff.transform = impl.diffAttribute(oldValue, newValue),
    Resources: (diff, oldValue, newValue) => diff.resources = new types.DifferenceCollection((0, util_1.diffKeyedEntities)(oldValue, newValue, impl.diffResource)),
    Outputs: (diff, oldValue, newValue) => diff.outputs = new types.DifferenceCollection((0, util_1.diffKeyedEntities)(oldValue, newValue, impl.diffOutput)),
};
/**
 * Compare two CloudFormation templates and return semantic differences between them.
 *
 * @param currentTemplate the current state of the stack.
 * @param newTemplate     the target state of the stack.
 * @param changeSet       the change set for this stack.
 *
 * @returns a +types.TemplateDiff+ object that represents the changes that will happen if
 *      a stack which current state is described by +currentTemplate+ is updated with
 *      the template +newTemplate+.
 */
function fullDiff(currentTemplate, newTemplate, changeSet) {
    normalize(currentTemplate);
    normalize(newTemplate);
    const theDiff = diffTemplate(currentTemplate, newTemplate);
    if (changeSet) {
        filterFalsePositivies(theDiff, changeSet);
    }
    return theDiff;
}
exports.fullDiff = fullDiff;
function diffTemplate(currentTemplate, newTemplate) {
    // Base diff
    const theDiff = calculateTemplateDiff(currentTemplate, newTemplate);
    // We're going to modify this in-place
    const newTemplateCopy = deepCopy(newTemplate);
    let didPropagateReferenceChanges;
    let diffWithReplacements;
    do {
        diffWithReplacements = calculateTemplateDiff(currentTemplate, newTemplateCopy);
        // Propagate replacements for replaced resources
        didPropagateReferenceChanges = false;
        if (diffWithReplacements.resources) {
            diffWithReplacements.resources.forEachDifference((logicalId, change) => {
                if (change.changeImpact === types.ResourceImpact.WILL_REPLACE) {
                    if (propagateReplacedReferences(newTemplateCopy, logicalId)) {
                        didPropagateReferenceChanges = true;
                    }
                }
            });
        }
    } while (didPropagateReferenceChanges);
    // Copy "replaced" states from `diffWithReplacements` to `theDiff`.
    diffWithReplacements.resources
        .filter(r => isReplacement(r.changeImpact))
        .forEachDifference((logicalId, downstreamReplacement) => {
        const resource = theDiff.resources.get(logicalId);
        if (resource.changeImpact !== downstreamReplacement.changeImpact) {
            propagatePropertyReplacement(downstreamReplacement, resource);
        }
    });
    return theDiff;
}
function isReplacement(impact) {
    return impact === types.ResourceImpact.MAY_REPLACE || impact === types.ResourceImpact.WILL_REPLACE;
}
/**
 * For all properties in 'source' that have a "replacement" impact, propagate that impact to "dest"
 */
function propagatePropertyReplacement(source, dest) {
    for (const [propertyName, diff] of Object.entries(source.propertyUpdates)) {
        if (diff.changeImpact && isReplacement(diff.changeImpact)) {
            // Use the propertydiff of source in target. The result of this happens to be clear enough.
            dest.setPropertyChange(propertyName, diff);
        }
    }
}
function calculateTemplateDiff(currentTemplate, newTemplate) {
    const differences = {};
    const unknown = {};
    for (const key of (0, util_1.unionOf)(Object.keys(currentTemplate), Object.keys(newTemplate)).sort()) {
        const oldValue = currentTemplate[key];
        const newValue = newTemplate[key];
        if ((0, util_1.deepEqual)(oldValue, newValue)) {
            continue;
        }
        const handler = DIFF_HANDLERS[key]
            || ((_diff, oldV, newV) => unknown[key] = impl.diffUnknown(oldV, newV));
        handler(differences, oldValue, newValue);
    }
    if (Object.keys(unknown).length > 0) {
        differences.unknown = new types.DifferenceCollection(unknown);
    }
    return new types.TemplateDiff(differences);
}
/**
 * Compare two CloudFormation resources and return semantic differences between them
 */
function diffResource(oldValue, newValue) {
    return impl.diffResource(oldValue, newValue);
}
exports.diffResource = diffResource;
/**
 * Replace all references to the given logicalID on the given template, in-place
 *
 * Returns true iff any references were replaced.
 */
function propagateReplacedReferences(template, logicalId) {
    let ret = false;
    function recurse(obj) {
        if (Array.isArray(obj)) {
            obj.forEach(recurse);
        }
        if (typeof obj === 'object' && obj !== null) {
            if (!replaceReference(obj)) {
                Object.values(obj).forEach(recurse);
            }
        }
    }
    function replaceReference(obj) {
        const keys = Object.keys(obj);
        if (keys.length !== 1) {
            return false;
        }
        const key = keys[0];
        if (key === 'Ref') {
            if (obj.Ref === logicalId) {
                obj.Ref = logicalId + ' (replaced)';
                ret = true;
            }
            return true;
        }
        if (key.startsWith('Fn::')) {
            if (Array.isArray(obj[key]) && obj[key].length > 0 && obj[key][0] === logicalId) {
                obj[key][0] = logicalId + '(replaced)';
                ret = true;
            }
            return true;
        }
        return false;
    }
    recurse(template);
    return ret;
}
function deepCopy(x) {
    if (Array.isArray(x)) {
        return x.map(deepCopy);
    }
    if (typeof x === 'object' && x !== null) {
        const ret = {};
        for (const key of Object.keys(x)) {
            ret[key] = deepCopy(x[key]);
        }
        return ret;
    }
    return x;
}
function filterFalsePositivies(diff, changeSet) {
    const replacements = findResourceReplacements(changeSet);
    diff.resources.forEachDifference((logicalId, change) => {
        change.forEachDifference((type, name, value) => {
            if (type === 'Property') {
                if (!replacements[logicalId]) {
                    value.changeImpact = types.ResourceImpact.NO_CHANGE;
                    value.isDifferent = false;
                    return;
                }
                switch (replacements[logicalId].propertiesReplaced[name]) {
                    case 'Always':
                        value.changeImpact = types.ResourceImpact.WILL_REPLACE;
                        break;
                    case 'Never':
                        value.changeImpact = types.ResourceImpact.WILL_UPDATE;
                        break;
                    case 'Conditionally':
                        value.changeImpact = types.ResourceImpact.MAY_REPLACE;
                        break;
                    case undefined:
                        value.changeImpact = types.ResourceImpact.NO_CHANGE;
                        value.isDifferent = false;
                        break;
                    // otherwise, defer to the changeImpact from `diffTemplate`
                }
            }
            else if (type === 'Other') {
                switch (name) {
                    case 'Metadata':
                        change.setOtherChange('Metadata', new types.Difference(value.newValue, value.newValue));
                        break;
                }
            }
        });
    });
}
function findResourceReplacements(changeSet) {
    const replacements = {};
    for (const resourceChange of changeSet.Changes ?? []) {
        const propertiesReplaced = {};
        for (const propertyChange of resourceChange.ResourceChange?.Details ?? []) {
            if (propertyChange.Target?.Attribute === 'Properties') {
                const requiresReplacement = propertyChange.Target.RequiresRecreation === 'Always';
                if (requiresReplacement && propertyChange.Evaluation === 'Static') {
                    propertiesReplaced[propertyChange.Target.Name] = 'Always';
                }
                else if (requiresReplacement && propertyChange.Evaluation === 'Dynamic') {
                    // If Evaluation is 'Dynamic', then this may cause replacement, or it may not.
                    // see 'Replacement': https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ResourceChange.html
                    propertiesReplaced[propertyChange.Target.Name] = 'Conditionally';
                }
                else {
                    propertiesReplaced[propertyChange.Target.Name] = propertyChange.Target.RequiresRecreation;
                }
            }
        }
        replacements[resourceChange.ResourceChange?.LogicalResourceId] = {
            resourceReplaced: resourceChange.ResourceChange?.Replacement === 'True',
            propertiesReplaced,
        };
    }
    return replacements;
}
function normalize(template) {
    if (typeof template === 'object') {
        for (const key of (Object.keys(template ?? {}))) {
            if (key === 'Fn::GetAtt' && typeof template[key] === 'string') {
                template[key] = template[key].split('.');
                continue;
            }
            else if (key === 'DependsOn') {
                if (typeof template[key] === 'string') {
                    template[key] = [template[key]];
                }
                else if (Array.isArray(template[key])) {
                    template[key] = template[key].sort();
                }
                continue;
            }
            if (Array.isArray(template[key])) {
                for (const element of (template[key])) {
                    normalize(element);
                }
            }
            else {
                normalize(template[key]);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,